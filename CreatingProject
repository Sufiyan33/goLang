Here, we are going to create a real time project related to card.
While working on project, we will learn a lot that how to declare, variables, arrays, functions, loops, error handling & a lot.

This project will have below functions or part :
1 : newDeck - Create a list of playing cards, Essentially an array of strings.
2 : Print - Log out the contents of a deck of cards.
3 : shuffle - Shuffles all the cards in a deck.
4 : Deal - Create a hand of cards.
5 : saveToFile - Save a list of cards to a file on the local machine.
6 : newDeckFromFile - Load a list of cards from the local machine.

Variable Declarations :
	-> Before going to explain variable let's check which types of Go language is?
	-> There are two types of languages :
		1- Dynamic Types : ex JavaScript, Ruby, Python etc.
		2- Static Types : C++, Java, Go etc.
		
	-> Since Go comes under static types hence while declaring variable we need to provide data types of variables.
		example : 
			var card string = "this is variable declaration example"
			OR
	-> You can also declare variable like below but in this case Go compiler will automatically recognize data types.
		card := "This is testing of variable declaration"
	
	Important : Please do not use := if you are re-assigning the variable. It should be only applicable first time.
		example : card = "five diamonds"
	
	Types of Go variable :
		The below are few basic types of variable in Go.
		1- bool		: true or false
		2- string	: "Hello"
		3- int		: 0, 12
		4- float64	: 10.0001
		
	-> Remember, like as java you can also define variable outside of the function and access or assign value inside the function.

Method Declarations :
	Like as java you can declare method in go but here the structures are changed. Let see how?
	example : 
		func newCard() String{
			return "Method declared"
		}
	-> Here newCard - is method name
	-> Data types & this is also a return type of method
	-> means when executed, this function will return a value of type String.
	Example :: 
	package method
	import "fmt"
	func method(){
		card := newCard()
		fmt.Println(card) 
	}

	func newCard() string{
		return "Declaring method here"
	}
	
Array, Slices and for Loops :
	GoLand uses two types of data structure :
	1 - Array : has fixed length of size
	2 - Slices : it similar to array that can grow and shrink depends on requirements(Dynamic array)
	
	Slices :: 
	-> At the time of declaring slices make sure that all the element should have same data types.
		example : if one is String then whole elements should be String not such like one String and other is int. no
	-> Let's declare slices :
		cards := []string{"Diamond", "star", newCard}
	-> you can append another slices or you can modify slices like below :
		cards = append(cards, "Fish")
	-> You can print this cards or you can use for loop to do the same.
	
	For Loops ::
	-> It is same like what you are using in Java but syntax are different.
		Syntax :
		for index, card := range cards{
			fmt.Println(card)
		}
		
	-> Index - index of this element in the array.
	-> Card - Current card we are iterating over.
	-> range cards - Take the slice of 'cars' & loop over it.
	Example :
		for i, card := range cards{
			fmt.Println(i, card)	
		}
		
Important :: If you are declaring any variable and not using any where then Go Compiler will give you compilation issue.

OOPS Approach vs Go Approach :
	-> Go is not a Object oriented programming language. Hence There is no concept of classes in Go.
	-> We can use Deck class which have some properties and give privileges that how to create instances and all.
	-> you can use customize way to handle it :
		like : type deck []string
				OR
			   Function with 'deck' as a receiver
	
	Custom type declaration :
	-> you can also declare slice like below :
		type deck []string
	-> Remember this point type deck == []string   :: both are equal
	Example :
		cards := []string{"Diamond", "star", newCard}
	-> you can write above example like as below :
		type deck []string
		cards := deck{"Diamond", "star", "Two"}
	
	Receiver Functions:
	-> Any variable of type "deck" now gets access to the "print" method.
	Example :
		func (d deck) print(){
			for i, card := range cards{
				fmt.Println(i, card)
			}
		}
		 
		-> d - Actually copy of the deck we are working with is available in the function as a variable called 'd'.(you can think as a reference variable)
		-> deck - Every variable of type 'deck' can call this function on itself.
	
Create a new Deck :
	-> Added new deck in deck.go file
	-> Don't forget to check that file, I also added suit & value
		Example :
		for i, suit := range cardSuits{
		}
	-> If you declared variable & not using anywhere then compiler will give you compilation issue Hence to avoid this replace variable with '_'
		like as : for _, suit := range cardSuits{
		}
		
	Slice Range Syntax :
	-> Slices work similarly array.
	-> But to access the element of slices, GO have some different strategy. Let's check
	Syntax :
		fruits[startIndexIncluding : upToNotIncluding]
		fruits[0 : 2] - it means start from zero & up to 2 but not include 2(means 0,1).
		fruits[ : 2] - it means start from zero up to 2 but not include 2(means 0,1).
		fruits[2 : ] - it means start from 2 till end