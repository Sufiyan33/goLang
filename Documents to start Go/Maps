----------------
	Map
----------------
-> Map in go is a collection of key value pair.
-> It is very similar to other like languages Like Hash in Ruby, Object in JavaScript, Dict in Python.
-> In map there should be same type of key & same type of value should be stored.
	Syntax :
		map[key]value{}
		
-> There are 3 ways to declare map.Let's one by one :
	way 1 :
		colors := map[string]string{
			"red":   "#ff0000",
			"green": "#78ff1ba",
		}
		fmt.Println(colors)
	
	way 2 : 
		var colors map[key]value
		fmt.Println(colors)
		
		Output : it will print empty map because you did just declaration not assigned any value to map.
		
	way 3 : There is a in built "make()" function provided by GO. Use this to create map
		home := make(map[key]value) 
		
----------------
	Manipulation
----------------
-> When you declared a empty map then need to pass key & value to it.
-> So let's do it
	Example :
		home := make(map[int]string)
		home[5] = "sufiyan"
		
		Output : [5 : "sufiyan"]
	
-> If you want to delete a particular key or value in map then there is a one in build function "delete()". Just pass key & good to go.
	delete(home, 5)
	
----------------
	Iterating
----------------
-> After adding elements in map, need to print element. So for this here, we will use for loop to iterate map & print value.
-> Create a function called "printMap" and write for loop inside this, like below :	
	Syntax : 
		func printMap(Argument-name type of map){
			for key, value := range Argument-name
				fmt.Println(key, value)
		}
		
	Example : 
		func printMap(c map[string]string) {
			for color, hex := range c {
				fmt.Println("Hex code for ", color, "is ", hex)
			}
		}
		
----------------
	Map vs struct
----------------
Map :
1 - All keys must be the same type.
2 - All values must be the same type.
3 - Keys are indexed - we can iterate over them.
4 - Map is a reference type.
5 - Use to represents a collection of related properties.
6 - Don't need to know all the keys at compile time.

Struct :
1 - Values can be of different types.
2 - Keys don't support indexing.
3 - Struct is value type.
4 - You need to know all the different fields at compile time.
5 - Use to represent a "thing" with a lot of different properties.
		 