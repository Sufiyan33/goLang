Here, we will learn what is Structs?
-------------------------
		STRUCT
-------------------------
-> A structure or struct in Golang is a user-defined type that allows to group/combine items of possibly different types into a single type.x
-> Struct is a data structure in GoLang. It is a collection of properties that are related to together.
-> It is very similar to JavaScript struct or similar to Hash in Ruby language.
-> This concept is generally compared with the classes in object-oriented programming.
-> It can be termed as a lightweight class that does not support inheritance but supports composition.
-> For Example, an address has a name, street, city, state, Pincode. It makes sense to group these three properties
	into a single structure address as shown below.

-> Declaring a structure:

	type Address struct {
	      name string 
	      street string
	      city string
	      state string
	      Pincode int
	}

-> We can also write above code like below ::
	type Address struct {
	    name, street, city, state string
	    Pincode int
	}

-> To Define a structure: The syntax for declaring a structure:
	Syntax : 
		var a Address

-> The above code creates a variable of a type Address which is by default set to zero.
-> For a struct, zero means all the fields are set to their corresponding zero value.
-> So the fields name, street, city, state are set to “”, and Pincode is set to 0.

-> You can also initialize a variable of a struct type using a struct literal as shown below:
	var a = Address{"Sufiyan", "Ahmad", "Bangalore", "Karnatka", 560037}

-> It is widely used in GoLang. So read it carefully.
-> Whenever you want to create a structs before that just define all the properties which structs may have.
------------
  Important :
------------
-> Remember, when we create a struct and pass to a function then Go internally make copy of whole struct & whenever you will do modification then
	you will do on copy not on original struct.

-------------------------
	Create Structs 
-------------------------
-> Here we will create a project to understand the concept. So let's start.
-> Define a structs of type person. Here may be person have some field which we want to declare for structs.
	Example :
	Person have fields :					Person have values :
		firstName -> String						firstName -> "Sufiyan
		lastName -> String						lastName -> "Ahmad"

-> Now create person structs and it's value.
-> For this above the main function declare structs like below :
	type person struct {
		firstName string
		lastName  string
	}

	func main() {
-> There are 3 ways to assign values to struscts field :
		// way : 1
		sufi := person{"Sufiyan", "Ahmad"}
		fmt.Println(sufi)
	
		// way : 2
		name := person{firstName: "Sufiyan", lastName: "Ahmad"}
		fmt.Println(name)
	
		//way : 3
		var suf person
		suf.firstName = "Sufiyan"
		suf.lastName = "Ahmad"
		fmt.Println(suf)
		fmt.Printf("%+v", suf)
	}

-------------------------
	Embedding Structs
-------------------------
-> Means that you can create structs inside another structs.
-> for example person must have contact details or address. So here you can create two construct of type person & contact info then inside person
	structs call the contact infor structs.
-> This is very similar like spring data jpa that what we do when we add @embedded
	Example : Declaring 
		type contactInfo struct {
			email   string
			pinCode int
		}

		type person struct {
			firstName string
			lastName  string
			contact   contactInfo
		} 
		
	Example : Assigning values
		jim := person{
			firstName: "Amit",
			lastName:  "kumar",
			contact: contactInfo{
				email:   "amit@gmai.com",
				pinCode: 560037,
			},
		}
		fmt.Printf("%+v", jim)

-------------------------
	Structs with Receiver functions
-------------------------
-> here, we will see that how to create struct with Receiver functions means function will receive receiver and by using that we can function from
	anywhere with receiver name.
	Example :
		func (p person) print() {
		fmt.Printf("%+v", p)
		}
	-> Now in struct where you have written jim, jsut call print function like : jim.print()
-> Now I am going to create one more function name as update. Here I will try to update some fields of person. Let's see how to do that :
	func (p person) UpdateName(newFirstName string) {
		p.firstName = newFirstName
	}
-> I called the above function but it didn't update value after executing.

-------------------------
	Pass by value OR pointer in struct
-------------------------
-> Let's do some analysis that why update method didn't update name.
-> In Go there is a concept of pointer & pass by value. As you know RAM has addresses of memory where data will or has been stored. And also have
	it's value, where it stored.
-> In order to update values do code changes as per below :
	-> Adde below line where you have created struct of person & called jim.updateName() method
		Like :
			jimPointer := &jim
			jimPointer.updateName("Sanjay")
	-> Now made changes in updateName() function like as below :
		func (pointerToPerson *person) UpdateName(newFirstName string) {
			(*pointerToPerson).firstName = newFirstName
		}
	-> &jim - means Give me the memory address of value whom him is pointing.
	-> *pointerToPerson - means Give me the value this memory address is pointing at. (also know as pointer operator)
-------
 Tips :
-------
-> If you have address and want to convert into value or vice versa then use below two approach :
1 : Turn address into value with *address
2 : Turn value into address with &value

-------------------------
	Value types VS Reference Types  
-------------------------
Values Types : with these use pointers to change things in a function (mean pointers requires to make changes or update).
Reference Types : with these don't worry about pointer (mean no need to pointer to change or update values).

			Values Types							Reference Types
				int										slices
				float									maps
				string									channels
				bool									pointers
				structs									functions

-------------------------
	Advantages
-------------------------
-> Encapsulation: Structures allow you to encapsulate related data together, making it easier to manage and modify the data.
-> Flexibility: Structures allow you to define custom types with their own behavior, making it easier to work with complex data.
-> Type safety: Structures provide type safety by allowing you to define the type of each field, which helps to prevent errors caused by assigning the wrong type of value.
-> Efficiency: Structures in Go are very efficient, both in terms of memory usage and performance.

-------------------------
	Disadvantages
-------------------------
-> 






	