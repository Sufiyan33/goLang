----------------------
	Array
----------------------
-> Array or very similar like other languages.
-> Array are used to store homogeneous types of data.
-> It has fixed length, that's why it is not preferable over to slice.
-> You can access array element by using index like array[0] ...
-> You can find lenth of the array by using len() method like array[len(array)].

----------------------
	Creating and accessing an Array
----------------------
-> You can create arrays by using two approach :
-------------------
	Approach 1 :
-------------------
-> an array is created using the var keyword of a particular type with name, size, and elements.
	Syntax :
		Var array_name[length]Type

-> In Go, arrays are mutable, so that you can use array[index] syntax to the left-hand side of the assignment to set the 
	elements of the array at the given index. Like below :
	Var array_name[index] = element
-> You can access the elements of the array by using the index value or by using for loop.
-> In Go language, the array type is one-dimensional.
-> The length of the array is fixed and unchangeable.
-> You are allowed to store duplicate elements in an array.

-------------------
	Approach 2 :
-------------------
-> You can also declare array using shorthand declaration.
-> It is more flexible than the approach 1.
	Syntax : 
		array_name := [length]Type{item1, item2, item3, ... itemN}
	Example :
		arr := [3]string{"Sufiyan", "Ahmad", "Go"}
-> You can access array elements using for loops.

----------------------
	Multi-Dimensional Array
----------------------
-> Since we already know that there is only 1-D array in Go but you can also create Multi-Dimensional arrays.
-> USing both approach var and shorthand.
	Syntax :
		var array_name[length]Type
	OR
		array_name[length1][length2][length3][length4]Type

-> In a multi-dimension array, if a cell is not initialized with some value by the user,hen it will initialize with zero by the compiler automatically.
-> There is no uninitialized concept in the Golang.
	Example :
		arr := [2][2]string{{"sufiyan", "ahmad"}, {"Go", "GoLang"}}
		
----------------------
	Important points
----------------------
-> If array is not initialized then the value of array is zero.
-> If ellipsis "..." is used instead of array length. In this case you can calculate length by using initialized elements.
	Example :
		arr := [...]string{"suf", "ahmad", "Go", "amazing"}
		fmt.println(len(arr))
		
-> In above example only 4 values are initialized hence size of array is 4.
-> In Go, Array is value type not reference.
-> Hence, when the array is assigned to a new variable, post that changes made in new variable that do not affect to original array.
	Example :
		arr := [...]int{2,3,11,10,13,15}
		fmt.println("Original array :: ", arr)
		
		// Assigning to new variable
		
		myArray := arr
		fmt.println("Original array :: ", arr)
		
		// making changes in new array 
		myArray[0] = 50
		fmt.println("modified newArray :: ", myArray)

----------------------		
	Copy an Array into Another Array
----------------------
-> Golang does not provide a specific built-in function to copy one array into another array.
-> But we can create a copy of an array by simply assigning an array to a new variable by value or by reference.
-> If we create a copy of an array by value and made some changes in the values of the original array, then it will not reflect in the copy of that array.
-> And if we create a copy of an array by reference and made some changes in the values of the original array, then it will reflect in the copy of that array.
	Example :
	// creating a copy of an array by value
	arr := arr1
	
	// Creating a copy of an array by reference
	arr := &arr1

-> ArraysDemo.go file for code.

-> There are multiple ways to copy an array into another array. Let's see one by one.
-> Here, we will look most suitable methods for copying in Go.
-----------------------
	1 : Using a loop 
-----------------------
-> We can also do this by using a loop.
	Example : 
		originalArray := [...]int{1, 2, 3, 4, 5, 6}
		copyArray := make([]int, len(originalArray))
	
		for i, value := range originalArray {
			copyArray[i] = value
		}
		fmt.Println("Original array :: ", originalArray)
		fmt.Println("Copy array :: ", copyArray)

-----------------------
	2 : Using copy function 
-----------------------
-> We can also do using copy function.
	Example :
		originalArray2 := []int{1, 2, 3, 4, 5, 6}
		copyArray2 := make([]int, len(originalArray))
	
		copy(copyArray2, originalArray2)
	
		fmt.Println("Original array :: ", originalArray2)
		fmt.Println("Copy array :: ", copyArray2)
		
-----------------------
	3 : Using append function 
-----------------------
-> We can also use append function.
	Example :
		originalArray3 := []int{1, 2, 3, 4, 5, 6}
		copyArray3 := make([]int, len(originalArray))
		//If you will write make method like above then it will add 0's as the size of length in the starting.
		//to avoid this issue add 0 in make function like below :
		copyArray3 := make([]int, 0,len(originalArray))
	
		copyArray3 = append(copyArray3, originalArray3...)
	
		fmt.Println("Original array :: ", originalArray3)
		fmt.Println("Copy array :: ", copyArray3)

-----------------------		
	pass an Array to a Function
-----------------------
-> YOu can also pass an array to a function.
	Example :
		func printArray(array []int) {
		    for _, value := range array {
		        fmt.Println(value)
		    }
		}