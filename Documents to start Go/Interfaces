------------------
	Interface
------------------
-> Go language interfaces are different from other languages. In Go language, the interface is a custom type that is used to specify
	 a set of one or more method signatures and the interface is abstract, so you are not allowed to create an instance of the interface. 
	 But you are allowed to create a variable of an interface type and this variable can be assigned 
	 with a concrete type value that has the methods the interface requires. Or in other words, the interface is a collection of methods 
	 as well as it is a custom type.
-> Interfaces make the code more flexible, scalable and it's a way to achieve polymorphism in Golang.
-> Set of methods required to implement such interface. Itâ€™s defined using keyword interface
-> An interface type is defined as a set of method signatures.
-> A value of interface type can hold any value that implements those methods.
-> Here, we don't need any keyword to extends or implements in Go.

------------------
	Declaration
------------------
-> You can declare interface like below by using interface keyword :
-> Remember that if you declared method inside interface then it will implicitly implement.
	Syntax :
		type interface_name interface{
			// Method signatures
		}
	
	Example : 
		type myInterface interface{
			// Methods
			fun1() int
			fun2() float64
		}
	OR 
		type bot interface {
			getGreeting() string
		}
		
------------------
	Method with Return type
------------------
-> Here, we will look how method returns value when  it declared in interface.
	Syntax :
		type interface_name interface{
			Function_name(list of arguments types)(list of return types)
		}
	Example : 
		type bot interface{
			getGreeting(string, int)(string, error)
		}

------------------
	Terminology
------------------
1- Concrete Type :
-> It is something that we can create a value directly & then access it. Change it create new copies of it.
	Like : map, struct, int, string 
2- Interface Type :
	bot

------------------
	Important points
------------------
1 - Interfaces are not generic types :
	- Other languages like java have generic types concept but go does not.
2 - Interfaces are 'implicit'
	- We don't manually have to say that our custom types satisfies some interface.
3 - Interfaces are a contract to help us manage types :
	- Garbage in or Garbage out. If our custom types implementation of a function is broken then interface won't help us.
4 - Interfaces are tough :
	- Understand how to read interfaces in the standard library. Writing your own interfaces is tough & require experience.

------------------
	HTTP Package
------------------
-> Here, we are going to create a code where we will hit a HTTP request and response will directly display in console.
-> For this, we will use net package : It provides a portable interface for network I/O, including TCP/IP.
-> Inside net package, HTTP comes & it provides HTTP client & server implementation.
-> By using this you can send request of type : GET, HEAD, POST & POSTFROM make HTTP or HTTPS.
	Example :
		func main() {
			resp, err := http.Get("http://google.com")
				if err != nil {
					fmt.Println("Error is :: ", err)
					os.Exit(1)
				}
			fmt.Println(resp)
		}
-> But this not what we want. To achieve that we need to explore more about Response or Response struct which having Body(io.ReadCloser) interface.
-> Response have below things :
	- status
	- statusCode
	- string
	- int
	- Body -> io.ReadCloser(Interface)
-> io.ReadCloser interface have two another interface :
	- Reader -> have method Read([]byte)(int, error)
	- Closer -> have method Close()(error)

-------------------
	Assignment
-------------------
-> If you want to open a file then run below command :
	go run main.go file-name (myFile.txt)
-> If you want to see content of that file then go with assignment.
-> If you want to check main.go file content then use below command :
	go run main.go main.go(file name)
	-> But this command will give the error that both file name are same like as main.
-> In order to solve this issue first build the file using below command :
	go build main.go then
-> Above command will create a executable file which you can run.
-> To run this file use below command if you are using windows :
	./main.exe main.go
-> If you are using mac then remove .exe file extension.

-> Complete below assignment where you need to find are of square and Triangle. 

	package main
	import "fmt"
	
	type triangle struct {
		height float64
		base   float64
	}
	type square struct {
		sideLength float64
	}
	type shape interface {
		getArea() float64
		//printArea()
	}
	
	func main() {
		t := triangle{base: 10, height: 12}
		s := square{sideLength: 20}
	
		printArea(t)
		printArea(s)
	}
	
	func (t triangle) getArea() float64 {
		return 0.5 * t.base * t.height
	}
	func (s square) getArea() float64 {
		return s.sideLength * s.sideLength
	}
	
	func printArea(s shape) {
		fmt.Println(s.getArea())
	}
